In-game Terminal or (https://fpga.jackfrosttower.com/)
Objective: Using the clocking frequency of the device, write code to generate a square curve simulating a random input frequency.
References:
  https://www.youtube.com/watch?v=GFdG1PJ4QjA
  https://www.fpga4fun.com/MusicBox.html


(The example Prof. Qwerty Petabyte gives in the above youtube video is pretty close to the solution.)
(Below is the full code from the in-game terminal.)
(Top half has comments on the objective and parameter details.)
(Bottom half is where the code comes in.)
  // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA.
  // The CQC-11 operates with a 125MHz clock.
  // Your design for a tone generator must support the following 
  // inputs/outputs:
  // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL
  // REQUIRES THE USE OF THESE NAMES!)
  // input clk - this will be connected to the 125MHz system clock
  // input rst - this will be connected to the system board's reset bus
  // input freq - a 32 bit integer indicating the required frequency
  //              (0 - 9999.99Hz) formatted as follows:
  //              32'hf1206 or 32'd987654 = 9876.54Hz
  // output wave_out - a square wave output of the desired frequency
  // you can create whatever other variables you need, but remember
  // to initialize them to something!

  `timescale 1ns/1ns
  module tone_generator (
    input clk,
    input rst,
    input [31:0] freq,
    output wave_out
  );
    // ---- DO NOT CHANGE THE CODE ABOVE THIS LINE ---- 
    // ---- IT IS NECESSARY FOR AUTOMATED ANALYSIS ----
    // TODO: Add your code below. 
    // Remove the following line and add your own implementation. 
    // Note: It's silly, but it compiles...
    
    reg [31:0] counter;
    reg wavey;
    assign wave_out = ~wavey;
    
    always @(posedge clk or posedge rst)
    begin
        if (rst == 1)
            begin
                counter <= 0;
                wavey <= 0;
            end
        else
        begin
        	if(counter >= 0.5/(freq*0.01)*125000000)  // (0.5 / frequency) * clocking
        		begin
        			counter <= 1;
        			wavey <= ~wavey;
        		end
        	else
        		counter <= counter + 1;
        end
    end
  endmodule


(Go through all the frequency simulations to complete the challenge to get a chip.)
(Interact with the makeshift satellite dish to summon the space ship.)