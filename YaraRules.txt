In-game terminal
Objective: Modify and run the binary without tripping any of the yara rules.
Reference: yara.readthedocs.io/en/stable/writingrules.html


(Run recursive ls to sees what all there. The binary is in current directory. And the yara rules in the yara_rules directory.)
~$ ls -alR
  .:
  -rwxr-xr-x 1 snowball2 snowball2 16688 Nov 24  2021 the_critical_elf_app
  drwxr-xr-x 1 root      root       4096 Dec  2  2021 yara_rules

  ./yara_rules:
  -rwxr-xr-x 1 root      root      4094217 Nov 23  2021 rules.yar


(Execute the binary to see it hit rule 135)
~$ ./the_critical_elf_app
  yara_rule_135 ./the_critical_elf_app


(grep to see what that rule says. It's catching on the string "candycane.")
~$ grep "yara_rule_135 " yara_rules/rules.yar -A 20
  rule yara_rule_135 {
   meta:
      description = "binaries - file Sugar_in_the_machinery"
      author = "Sparkle Redberry"
      reference = "North Pole Malware Research Lab"
      date = "1955-04-21"
      hash = "19ecaadb2159b566c39c999b0f860b4d8fc2824eb648e275f57a6dbceaf9b488"
   strings:
      $s = "candycane"
   condition:
      $s
  }


(Can't edit the binary directly or else invisibly formatting can cause it to crash.)
(Edit the hex dump instead)
~$ xxd the_critical_elf_app > hex
~$ nano hex
F6 to search.
candycane =(in hex)=> 63616e647963616e65
Change little c to big C by replacing 63 with 43.
Ctrl + X to save


(Convert hex dump to binary and make it executable)
~$ xxd -r hex > bin
~$ chmod 775 bin


(Run the new binary and it hits rule 1056.)
~$ ./bin
  yara_rule_1056 ./bin


~$ grep "yara_rule_1056 " yara_rules/rules.yar -A 20
  rule yara_rule_1056 {
   meta: 
        description = "binaries - file frosty.exe"
        author = "Sparkle Redberry"
        reference = "North Pole Malware Research Lab"
        date = "1955-04-21"
        hash = "b9b95f671e3d54318b3fd4db1ba3b813325fcef462070da163193d7acb5fcd03"
    strings:
        $s1 = {6c 6962 632e 736f 2e36}
        $hs2 = {726f 6772 616d 2121}
    condition:
        all of them
  }


(*s1 hex to string = libc.so.6)
(*hs2 hex to string = rogram!!)


(Edit the hex again. F6 to search for 2121. Change to 2100.)
(This changes double ! to single !)
~$ nano hex


(Convert hex into bin again.)
~$ xxd -r hex > bin


(Run it to hit rule 1732)
~$ ./bin
  yara_rule_1732 ./bin


~$ grep "yara_rule_1732 " yara_rules/rules.yar -A 30
  rule yara_rule_1732 {
   meta:
      description = "binaries - alwayz_winter.exe"
      author = "Santa"
      reference = "North Pole Malware Research Lab"
      date = "1955-04-22"
      hash = "c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8"
   strings:
      $s1 = "This is critical for the execution of this program!!" fullword ascii
      $s2 = "__frame_dummy_init_array_entry" fullword ascii
      $s3 = ".note.gnu.property" fullword ascii
      $s4 = ".eh_frame_hdr" fullword ascii
      $s5 = "__FRAME_END__" fullword ascii
      $s6 = "__GNU_EH_FRAME_HDR" fullword ascii
      $s7 = "frame_dummy" fullword ascii
      $s8 = ".note.gnu.build-id" fullword ascii
      $s9 = "completed.8060" fullword ascii
      $s10 = "_IO_stdin_used" fullword ascii
      $s11 = ".note.ABI-tag" fullword ascii
      $s12 = "naughty string" fullword ascii
      $s13 = "dastardly string" fullword ascii
      $s14 = "__do_global_dtors_aux_fini_array_entry" fullword ascii
      $s15 = "__libc_start_main@@GLIBC_2.2.5" fullword ascii
      $s16 = "GLIBC_2.2.5" fullword ascii
      $s17 = "its_a_holly_jolly_variable" fullword ascii
      $s18 = "__cxa_finalize" fullword ascii
      $s19 = "HolidayHackChallenge{NotReallyAFlag}" fullword ascii
      $s20 = "__libc_csu_init" fullword ascii
   condition:
      uint32(1) == 0x02464c45 and filesize < 50KB and
      10 of them
  }


(*uint32(1) == 0x02464c45 is looking at the bytes starting at 1. It's in little endian ("bytes" are reversed) and translates to ELF2 which is the file's signature. So can't change.)
(*10 of them => Doesn't look like those strings are simple strings to change.)
(*filesize < 50KB => We can pad the end of the file with multiple null bytes to increase the size.)


(Print 100000 x 0 into hex2 and convert it into binary.)
~$ printf '0%.0s' {1..100000} > hex2; xxd -r -p hex2 > bin2


(Attach bin2 to the end of the binary file to pad out the size)
~$ cat bin bin2 > bin3


(Make bin3 executable)
~$ chmod 755 bin3


(Run the new binary)
~$ ./bin3 
Machine Running.. 
Toy Levels: Very Merry, Terry
Naughty/Nice Blockchain Assessment: Untampered
Candy Sweetness Gauge: Exceedingly Sugarlicious
Elf Jolliness Quotient: 4a6f6c6c7920456e6f7567682c204f76657274696d6520417070726f766564


Success!!